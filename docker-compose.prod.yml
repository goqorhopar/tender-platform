version: '3.8'

services:
  # PostgreSQL database
  db:
    image: postgres:15
    container_name: tender_platform_db
    environment:
      POSTGRES_DB: tender_platform
      POSTGRES_USER: ${DB_USER:-tender_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-tender_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - tender_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tender_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: tender_platform_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tender_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tender_platform_backend
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-tender_user}:${DB_PASSWORD:-tender_pass}@db:5432/tender_platform
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
      - uploads:/app/app/uploads
      - backups:/app/backups
    networks:
      - tender_network
    restart: unless-stopped
    ports:
      - "8000:8000"
    command: >
      sh -c "python -c 'from app.database import engine; from app.models import Base; Base.metadata.create_all(bind=engine)' &&
             python -c 'from app.database import init_db; init_db()' &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  # Celery worker for background tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tender_platform_celery_worker
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-tender_user}:${DB_PASSWORD:-tender_pass}@db:5432/tender_platform
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
    depends_on:
      - db
      - redis
      - backend
    volumes:
      - ./backend:/app
    networks:
      - tender_network
    restart: unless-stopped
    command: celery -A app.tasks.celery_app worker --loglevel=info --pool=solo

  # Celery Beat for periodic tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tender_platform_celery_beat
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-tender_user}:${DB_PASSWORD:-tender_pass}@db:5432/tender_platform
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
    depends_on:
      - db
      - redis
      - backend
    volumes:
      - ./backend:/app
    networks:
      - tender_network
    restart: unless-stopped
    command: celery -A app.tasks.celery_app beat --loglevel=info

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: tender_platform_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl:ro
      - ./frontend/build:/var/www/html:ro
    networks:
      - tender_network
    depends_on:
      - backend
    restart: unless-stopped

  # Telegram bot service
  telegram_bot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tender_platform_telegram_bot
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-tender_user}:${DB_PASSWORD:-tender_pass}@db:5432/tender_platform
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - WEBHOOK_URL=${WEBHOOK_URL}
    depends_on:
      - db
      - backend
    volumes:
      - ./backend:/app
    networks:
      - tender_network
    restart: unless-stopped
    command: python -c "from app.telegram_bot.bot import start_bot; start_bot()"

volumes:
  postgres_data:
  redis_data:
  uploads:
  backups:

networks:
  tender_network:
    driver: bridge